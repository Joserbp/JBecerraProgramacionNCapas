@model ML.Usuario
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Usuario</h2>
            <h5>Ingrese los datos del Usuario:</h5>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>


    <div class="col-md-12">
        @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="form-vertical">
                <div class="row">
                    <div class="form-group">
                        <div>
                            @Html.LabelFor(model => model.IdUsuario, new { @class = "hidden" })
                            @Html.TextBoxFor(model => model.IdUsuario, new { @class = "hidden form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.IdUsuario)
                            @*hidden*@
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Nombre)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-user" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @onkeypress = "return LetrasEspacioYAcentos(event, 'lblErrorNombre')", @autocomplete = "off" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "text-danger" })
                            <label id="lblErrorNombre"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.UserName)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-user" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @onkeypress = "return SoloLetras(event, 'lblErrorUserName')", @autocomplete = "off" })
                            </div>
                            @Html.ValidationMessageFor(model => model.UserName, null, new { @class = "text-danger" })
                            <label id="lblErrorUserName"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Telefono)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-earphone" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", @onkeypress = "return SoloNumeros(event, 'lblErrorTelefono')", @autocomplete = "off" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Telefono, null, new { @class = "text-danger" })
                            <label id="lblErrorTelefono"></label>

                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.NumeroInterior)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-home" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Direccion.NumeroInterior, null, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ApellidoPaterno)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-user" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", @onkeypress = "return SoloLetras(event, 'lblErrorApellidoPaterno')" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ApellidoPaterno, null, new { @class = "text-danger" })
                            <label id="lblErrorApellidoPaterno"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.FechaNacimiento)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-calendar" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.FechaNacimiento, new { @class = "form-control", @id = "txtFechaNacimiento" })
                            </div>
                            @Html.ValidationMessageFor(model => model.FechaNacimiento, null, new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Celular)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-phone" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Celular, new { @class = "form-control", @onkeypress = "return SoloNumeros(event, 'lblErrorCelular')" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Celular, null, new { @class = "text-danger" })
                            <label id="lblErrorCelular"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.Pais, new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-globe" aria-hidden="true"></span>
                                </span>
                                @if (Model.Direccion.Colonia.Municipio.Estado.Pais.Paises == null)
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(string.Empty, "Value", "Text"), "Selecciona un País", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "Nombre"), "Selecciona un país", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, null, new { @class = "text-danger" })
                        </div>

                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.ApellidoMaterno)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-user" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", @onkeypress = "return SoloLetras(event, 'lblErrorApellidoMaterno')" })
                            </div>
                            @Html.ValidationMessageFor(model => model.ApellidoMaterno, null, new { @class = "text-danger" })
                            <label id="lblErrorApellidoMaterno"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Sexo)
                            <br />
                            Masculino @Html.RadioButtonFor(model => model.Sexo, "H ")
                            Femenino @Html.RadioButtonFor(model => model.Sexo, "M ")
                            <br />
                            @Html.ValidationMessageFor(model => model.Sexo, null, new { @class = "text-danger" })
                        </div>
                        <div>
                            @Html.LabelFor(model => model.Direccion.IdDireccion, new { @class = "hidden" })
                            @Html.TextBoxFor(model => model.Direccion.IdDireccion, new { @class = "hidden form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Direccion.IdDireccion)
                            @*hidden*@
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Calle)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-road" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Direccion.Calle, null, new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado, new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-globe" aria-hidden="true"></span>
                                </span>
                                @if (Model.Direccion.Colonia.Municipio.Estado.Estados == null)
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, null, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Rol)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-repeat" aria-hidden="true"></span>
                                </span>
                                @Html.DropDownListFor(model => model.Rol.IdRol, new SelectList(Model.Rol.Roles, "IdRol", "Nombre"), "Seleciona una opcion", new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Rol.IdRol, null, new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.CURP)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.CURP, new { @class = "form-control", @onkeypress = "return Curp(event, 'lblErrorCURP')" })
                            </div>
                            @Html.ValidationMessageFor(model => model.CURP, null, new { @class = "text-danger" })
                            <label id="lblErrorCURP"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.NumeroExterior)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-home" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Direccion.NumeroExterior, new { @class = "form-control" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Direccion.NumeroExterior, null, new { @class = "text-danger" })
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio, new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-globe" aria-hidden="true"></span>
                                </span>
                                @if (Model.Direccion.Colonia.Municipio.Municipios == null)
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, null, new { @class = "text-danger" })
                        </div>

                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Email)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-envelope" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmail", @onblur = "return ValidarEmail(this)" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Email, null, new { @class = "text-danger" })
                            <label id="lblErrorEmail"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Password)
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-asterisk" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtPassword", @onblur = "return ValidarPassword(this)" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger" })
                            <label id="lblErrorPassword"></label>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        <div class="col-md-3">
                            <label>Confirmar Email</label>
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-envelope" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmailConfirm", @onblur = "return MatchEmail(this , 'lblErrorEmailConfirm')" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Email, null, new { @class = "text-danger" })
                            <label id="lblErrorEmailConfirm"></label>
                        </div>
                        <div class="col-md-3">
                            <label>Password Confirmacion</label>
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-asterisk" aria-hidden="true"></span>
                                </span>
                                @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtPasswordConfirm", @onblur = "return MatchPassword(this, 'lblErrorPasswordConfirm')" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger" })
                            <label id="lblErrorPasswordConfirm"></label>
                        </div>
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Imagen)
                            <input type="file" name="ImagenData" onchange="readURL(this)" />
                            @if (Model.Imagen != null)
                            {
                                <img id="ImagenPreview" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Imagen)" width=" 100" height="100" />
                            }
                            else
                            {
                                <img id="ImagenPreview" src="~/Content/ImageNotFound.jpg" height=100 width=100 />
                            }
                            @Html.ValidationMessageFor(model => model.Imagen, null, new { @class = "text-danger" })
                        </div>

                        @Html.HiddenFor(model => model.Imagen)

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Colonia, new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">
                                    <span class="glyphicon glyphicon-globe" aria-hidden="true"></span>
                                </span>
                                @if (Model.Direccion.Colonia.Colonias == null)
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(string.Empty, "Value", "Text"), "Selecciona una Colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Selecciona una Colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                                }
                            </div>
                            @Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia, null, new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="form-group">
                        <div class="col-md-12">
                            <input type="submit" value="Guardar" class="btn btn-success" />
                            @Html.ActionLink("Regresar", "GetAll", "Usuario", htmlAttributes: new { @class = "btn btn-danger" })
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>



@Scripts.Render("~/bundles/jquery")
<script src="../../Scripts/jquery-1.10.2.js" type="text/javascript"></script>
<script src="~/Scripts/jquery1.6.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery1.8-ui.min.js" type="text/javascript"></script>
<link href="~/Content/jquery1.8-ui.css" rel="Stylesheet" type="text/css" />


<script type="text/javascript">
    var j = jQuery.noConflict();

    j(function () {
        j("#txtFechaNacimiento").datepicker({
            dateFormat: 'dd-mm-yy',
            changeMonth: true,
            changeYear: true

        });
        $(".ui-datepicker-trigger").css("width", "20px");
        $(".ui-datepicker-trigger").css("height", "20px");
    });


    function LetrasEspacioYAcentos(e, controlId) {
        var caracter = e.key;
        if (!/^[a-zA-ZÀ-ÿ\u00f1\u00d1\s]*$/g.test(caracter)) {
            $('#' + controlId).text("Solo se aceptan letras");
            $('#' + controlId).css({ "color": "red" });
            return false;
        }
        else {
            $('#' + controlId).text("");
            return true;
        }
    }
    function SoloLetras(e, controlId) {
        var caracter = e.key;
        if (!/^[a-zA-ZÀ-ÿ\u00f1\u00d1]*$/g.test(caracter)) {
            $('#' + controlId).text("Solo se aceptan letras");
            $('#' + controlId).css({ "color": "red" });
            return false;
        }
        else {
            $('#' + controlId).text("");
            return true;
        }
    }
    function Curp(e, controlId) {
        var caracter = e.key;
        if (!/^([A-Z0-9])*$/g.test(caracter)) {
            $('#' + controlId).text("Formato Erronio.");
            $('#' + controlId).css({ "color": "red" });
            return false;
        }
        else {
            $('#' + controlId).text("");
            return true;
        }
    }
    function SoloNumeros(e, controlId) {
        var caracter = e.key;
        if (!/^[0-9]/g.test(caracter)) {
            $('#' + controlId).text("Solo se aceptan numeros");
            $('#' + controlId).css({ "color": "red" });
            return false;
        }
        else {
            $('#' + controlId).text("");
            return true;
        }
    }
    function ValidarEmail() {
        var txtEmail = $("#txtEmail");
        var regexToEmail = /^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if (regexToEmail.test(txtEmail.val())) {
            //Es un email correcto
            $('#txtEmail').css('border-color', 'green');
            $('#lblErrorEmail').text("");
        }
        else {
            $('#lblErrorEmail').text("Ingrese un email valido");
            $('#lblErrorEmail').css({ "color": "red" });
            $('#txtEmail').css('border-color', 'red');
        }
    }
    function MatchEmail(text, controlId) {
        var txtEmail = $("#txtEmail");
        var txtEmailConfirm = $("#txtEmailConfirm");
        if (txtEmail.val() == txtEmailConfirm.val()) {
            $('#txtEmailConfirm').css('border-color', 'green');
            $('#' + controlId).text("");
        }
        else {
            $('#' + controlId).text("Los correos no coinciden");
            $('#' + controlId).css({ "color": "red" });
            $('#txtEmailConfirm').css('border-color', 'red');
        }
    }
    function ValidarPassword() {
        var txtPassword = $("#txtPassword");
        var regexToPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$@@$!%*?&])[A-Za-z\d$@@$!%*?&]{8,15}/;
        if (regexToPassword.test(txtPassword.val())) {
            //Es un password correcto
            $('#txtPassword').css('border-color', 'green');
            $('#lblErrorPassword').text("");
        }
        else {
            $('#lblErrorPassword').text("Ingrese un password valido 1 letra Mayuscula, 1 minuscula, 1 numero, 1 carcater especial");
            $('#lblErrorPassword').css({ "color": "red" });
            $('#txtPassword').css('border-color', 'red');
        }
    }
    function MatchPassword(text, controlId) {
        var txtPassword = $("#txtPassword");
        var txttxtPasswordConfirm = $("#txtPasswordConfirm");
        if (txtPassword.val() == txttxtPasswordConfirm.val()) {
            $('#' + controlId).text("");
            $('#txtPasswordConfirm').css('border-color', 'green');
        }
        else {
            $('#' + controlId).text("Los Passwords no coinciden");
            $('#' + controlId).css({ "color": "red" });
            $('#txtPasswordConfirm').css('border-color', 'red');
        }
    }
</script>


<script>
    function readURL(input) {
        if (input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (img) {
                $("#ImagenPreview").attr('src', img.target.result);
            }
            reader.readAsDataURL(input.files[0]);
        }
    }
</script>

<script>
    $(document).ready(function () {
        //Cambio en Estados cuando se selecciona un Pais
        $("#ddlPais").change(function () {
            $("#ddlEstado").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetEstado")',
                dataType: 'json',
                data: { IdPais: $("#ddlPais").val() },
                success: function (estados) {
                    $("#ddlEstado").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(estados, function (i, estados) {
                        $("#ddlEstado").append('<option value="'
                                                    + estados.IdEstado + '">'
                                                    + estados.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        });
        //Cambio en municipios cuando se selecciona un Estado
        $("#ddlEstado").change(function () {
            $("#ddlMunicipio").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMunicipio")',
                dataType: 'json',
                data: { IdEstado: $("#ddlEstado").val() },
                success: function (municipios) {
                    $("#ddlMunicipio").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(municipios, function (i, municipios) {
                        $("#ddlMunicipio").append('<option value="'
                                                   + municipios.IdMunicipio + '">'
                                                   + municipios.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        });
        //Cambio en Colonia cuando se selecciona un Municipio
        $("#ddlMunicipio").change(function () {
            $("#ddlColonia").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetColonia")',
                dataType: 'json',
                data: { IdMunicipio: $("#ddlMunicipio").val() },
                success: function (colonias) {
                    $("#ddlColonia").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(colonias, function (i, colonias) {
                        $("#ddlColonia").append('<option value="'
                                                    + colonias.IdColonia + '">'
                                                    + colonias.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        });
    });
</script>
